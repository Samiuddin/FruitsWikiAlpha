/* DO NOT EDIT THIS FILE - it is machine generated */

/*COMMAND for header file: javah -bootclasspath /home/sami/Android/android-sdk-linux/platforms/android-14/android.jar
 -classpath /home/sami/Android/OpenCV-2.4.9-android-sdk/sdk/java/bin/classes/:
 /home/sami/Android/AndroidStudioProjects/FruitsWikiAlpha/app/build/intermediates/classes/debug 
 -jni com.samiuddin.sami.fruitswikialpha.HomeActivity
*/

/*
COMMAND TO COMPILE THIS FILE INTO .SO:
~/Android/AndroidStudioProjects/FruitsWikiAlpha/app/src/main/jni$ /home/sami/Android/android-ndk-r10b/ndk-build

*/

#include "com_samiuddin_sami_fruitswikialpha_HomeActivity.h"

#include <opencv2/imgproc/imgproc.hpp>
#include <opencv2/core/core.hpp>
#include <opencv2/features2d/features2d.hpp>
#include <opencv2/calib3d/calib3d.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <vector>
#include <iostream>
#include <cmath>

#include <opencv2/opencv.hpp>
#include <opencv2/imgcodecs.hpp>
#include <opencv2/imgproc/imgproc.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/ml/ml.hpp>


using namespace std;
using namespace cv;

extern "C" {
JNIEXPORT float JNICALL Java_com_samiuddin_sami_fruitswikialpha_HomeActivity_FindFeatures(JNIEnv*, jobject, jlong addrGray, jlong addrRgba);

JNIEXPORT float JNICALL Java_com_samiuddin_sami_fruitswikialpha_HomeActivity_FindFeatures(JNIEnv* env, jobject jobj, jlong addrGray, jlong addrRgba) {

        Mat& mGr  = *(Mat*)addrGray;
        Mat& mRgb = *(Mat*)addrRgba;

        vector<KeyPoint> v;

        //FastFeatureDetector detector(50);
        //detector.detect(mGr, v); // DETECTS FAST LIKE REALLY FAST


        OrbFeatureDetector detector(100);
        detector.detect(mGr, v); // ORB DETECTS LESS THAN FAST AND IT IS SLOW (but not unusually slow)
        OrbDescriptorExtractor extractor(100);

        //SiftFeatureDetector detector(50); //It is a non-free module
        //detector.detect(mGr, v); // It is patented, so I am not using it

        //StarFeatureDetector detector(50);
        //detector.detect(mGr, v); // DETECTS SLOW LIKE REALLY SLOW

        //MserFeatureDetector detector(50);// It is slower than ORB and doesn't detect anything
        //detector.detect(mGr, v);// Like it detects nothing

        //DenseFeatureDetector detector(50);// Better than MSER but very slow.
        //detector.detect(mGr, v);// Useless

        for( unsigned int i = 0; i < v.size(); i++ ) {
            const KeyPoint& kp = v[i];
            circle(mRgb, Point(kp.pt.x, kp.pt.y), 10, Scalar(0,225,0,255));
        }
/*
        // Let's calculate contours now
        Canny(mGr, mGr, 100, 200, 3);
        vector<vector<Point> > contours;
        vector<Vec4i> hierarchy;
        RNG rng(12345);
        findContours(mGr, contours, hierarchy, CV_RETR_TREE, CV_CHAIN_APPROX_SIMPLE );

        /// Draw contours
        int idx = 0;
        for(; idx >= 0; idx = hierarchy[idx][0] )
        {
            //Scalar color( 255, 255, 255 );
            Scalar color = Scalar( rng.uniform(0, 255), rng.uniform(0, 255), rng.uniform(0, 255) );
            drawContours(mRgb, contours, idx, color, CV_FILLED, 8, hierarchy);
        }*/

        Mat sampleMat(1, 100, CV_32FC1, extractor);
        CvSVM *svm = new CvSVM;
        svm.load("svmSavePath.xml");
        float res = svm.predict(sampleMat);

        return (*env)->NewStringUTF(env, res);
  }

}
